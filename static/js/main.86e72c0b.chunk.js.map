{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","components/NavBar/NavBar.tsx","pages/HomePage/HomePage.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink/PersonLink.tsx","components/PeopleItem/PeopleItem.tsx","components/PeopleList/PeopleList.tsx","pages/PeoplePage/PeoplePage.tsx","pages/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["PageNavLink","to","text","className","isActive","classNames","NavBar","role","HomePage","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","slug","sex","name","PeopleItem","person","born","died","motherName","mother","fatherName","father","slugParam","useParams","getParrent","parentName","parent","PeopleList","people","map","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","loadTodos","loadedPeople","find","useEffect","length","NotFoundPage","App","path","index","element","replace","createRoot","document","getElementById","render"],"mappings":"6PAQaA,EAAwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACnC,cAAC,IAAD,CACED,GAAIA,EACJE,UAAW,gBAAGC,EAAH,EAAGA,SAAH,OAAkBC,IAC3B,cACA,CACE,8BAA+BD,GAHxB,EAFb,SAUGF,GAXgC,ECNxBI,EAAS,kBACpB,qBACE,UAAQ,MACRH,UAAU,iCACVI,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKJ,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,EAAD,CAAaF,GAAG,IAAIC,KAAK,SACzB,cAAC,EAAD,CAAaD,GAAG,UAAUC,KAAK,iBAVjB,ECFTM,EAAW,kBACtB,oBAAIL,UAAU,QAAd,sBADsB,E,oCCEXM,G,MAAS,kBACpB,qBAAKN,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCOf,SAASO,IAEd,OANYC,EAMA,IALL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,KAMvBI,MAAK,kBAAMC,MATA,oEASN,IACLD,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,IARlB,IAAcP,CASb,CCLM,IAAMQ,EAAuB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAKC,EAAd,EAAcA,KAAd,OAClC,cAAC,IAAD,CACErB,GAAE,kBAAamB,GACfjB,UAAWE,IAAW,CACpB,kBAA2B,MAARgB,IAHvB,SAMGC,GAP+B,ECAvBC,EAAwB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEpCJ,EACEI,EADFJ,KAAME,EACJE,EADIF,KAAMD,EACVG,EADUH,IAAKI,EACfD,EADeC,KAAMC,EACrBF,EADqBE,KAAMC,EAC3BH,EAD2BG,WAAYC,EACvCJ,EADuCI,OAAQC,EAC/CL,EAD+CK,WAAYC,EAC3DN,EAD2DM,OAGvDC,EAAcC,cAAdD,UAEFE,EAAa,SAACC,EAA2BC,GAC7C,OAAIA,EAEA,cAAC,EAAD,CACEf,KAAMe,EAAOf,KACbC,IAAKc,EAAOd,IACZC,KAAMa,EAAOb,OAKZY,GAAc,GACtB,EAED,OACE,qBACE,UAAQ,SACR/B,UAAW4B,IAAcX,EAAO,yBAA2B,GAF7D,UAIE,6BACE,cAAC,EAAD,CAAYA,KAAMA,EAAMC,IAAKA,EAAKC,KAAMA,MAG1C,6BAAKD,IACL,6BAAKI,IACL,6BAAKC,IACL,6BAAKO,EAAWN,EAAYC,KAC5B,6BAAKK,EAAWJ,EAAYC,OAGjC,ECtCYM,EAAwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACnC,wBACE,UAAQ,cACRlC,UAAU,uDAFZ,UAIE,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,6CAIJ,gCACGkC,EAAOC,KAAI,SAAAd,GAAM,OAChB,cAAC,EAAD,CAEEA,OAAQA,GADHA,EAAOJ,KAFE,QAjBa,ECFxBmB,EAAa,WACxB,MAA4BC,mBAAmB,IAA/C,mBAAOH,EAAP,KAAeI,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEMC,EAAS,iDAAG,qGAChBH,GAAa,GADG,kBAIajC,IAJb,OAIRqC,EAJQ,OAMdN,EAAUM,EAAaT,KAAI,SAAAd,GAAM,kCAC5BA,GAD4B,IAE/BI,OAAQmB,EAAaC,MAAK,SAAAb,GAAM,OAAIA,EAAOb,OAASE,EAAOG,UAA3B,IAChCG,OAAQiB,EAAaC,MAAK,SAAAb,GAAM,OAAIA,EAAOb,OAASE,EAAOK,UAA3B,KAHD,KANnB,gDAYdgB,GAAW,GAZG,QAehBF,GAAa,GAfG,yDAAH,qDAsBf,OAJAM,qBAAU,WACRH,GACD,GAAE,IAGD,qCACE,oBAAI3C,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,qBAAKA,UAAU,sBAAf,SACGuC,EACC,cAAC,EAAD,IAEA,qCACGE,GACC,mBAAG,UAAQ,qBAAqBzC,UAAU,kBAA1C,mCAKAyC,IAAYP,EAAOa,QACnB,mBAAG,UAAQ,kBAAX,gDAKAN,GAAWP,EAAOa,QAClB,cAAC,EAAD,CAAYb,OAAQA,aAQnC,EChEYc,EAAe,kBAC1B,oBAAIhD,UAAU,QAAd,2BAD0B,ECSfiD,G,MAAM,kBACjB,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,sBAAMjD,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAOkD,KAAK,IAAZ,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOF,KAAK,OAAOE,QAAS,cAAC,IAAD,CAAUtD,GAAG,IAAIuD,SAAO,SAGtD,eAAC,IAAD,CAAOH,KAAK,UAAZ,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOF,KAAK,aAAaE,QAAS,cAAC,EAAD,SAGpC,cAAC,IAAD,CAAOF,KAAK,IAAIE,QAAS,cAAC,EAAD,eAjBhB,GCDnBE,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.86e72c0b.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ninterface Props {\n  to: string;\n  text: string;\n}\nexport const PageNavLink:FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => classNames(\n      'navbar-item',\n      {\n        'has-background-grey-lighter': isActive,\n      },\n    )}\n\n  >\n    {text}\n  </NavLink>\n);\n","import { PageNavLink } from '../PageNavLink';\n\nexport const NavBar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" text=\"Home\" />\n        <PageNavLink to=\"/people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ninterface Props {\n  slug: string;\n  sex: string;\n  name: string;\n}\nexport const PersonLink:FC<Props> = ({ slug, sex, name }) => (\n  <NavLink\n    to={`/people/${slug}`}\n    className={classNames({\n      'has-text-danger': sex === 'f',\n    })}\n  >\n    {name}\n  </NavLink>\n);\n","import { FC } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ninterface Props {\n  person: Person;\n}\n\nexport const PeopleItem: FC<Props> = ({ person }) => {\n  const {\n    slug, name, sex, born, died, motherName, mother, fatherName, father,\n  } = person;\n\n  const { slugParam } = useParams();\n\n  const getParrent = (parentName: string | null, parent?: Person) => {\n    if (parent) {\n      return (\n        <PersonLink\n          slug={parent.slug}\n          sex={parent.sex}\n          name={parent.name}\n        />\n      );\n    }\n\n    return parentName || '-';\n  };\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={slugParam === slug ? 'has-background-warning' : ''}\n    >\n      <td>\n        <PersonLink slug={slug} sex={sex} name={name} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>{getParrent(motherName, mother)}</td>\n      <td>{getParrent(fatherName, father)}</td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport { Person } from '../../types';\nimport { PeopleItem } from '../PeopleItem';\n\ninterface Props {\n  people: Person[];\n}\n\nexport const PeopleList: FC<Props> = ({ people }) => (\n  <table\n    data-cy=\"peopleTable\"\n    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n  >\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Sex</th>\n        <th>Born</th>\n        <th>Died</th>\n        <th>Mother</th>\n        <th>Father</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {people.map(person => (\n        <PeopleItem\n          key={person.slug}\n          person={person}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { useEffect, useState } from 'react';\nimport { Person } from '../../types';\nimport { Loader } from '../../components/Loader';\nimport { getPeople } from '../../api';\nimport { PeopleList } from '../../components/PeopleList';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const loadTodos = async () => {\n    setIsLoading(true);\n\n    try {\n      const loadedPeople = await getPeople();\n\n      setPeople(loadedPeople.map(person => ({\n        ...person,\n        mother: loadedPeople.find(parent => parent.name === person.motherName),\n        father: loadedPeople.find(parent => parent.name === person.fatherName),\n      })));\n    } catch {\n      setIsError(true);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <>\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!isError && !people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!isError && people.length && (\n                <PeopleList people={people} />\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { NavBar } from './components/NavBar';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nimport './App.scss';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\">\n            <Route index element={<HomePage />} />\n            <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          </Route>\n\n          <Route path=\"/people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slugParam\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}